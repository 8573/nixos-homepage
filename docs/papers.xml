<?xml version="1.0" encoding="utf-8" ?>
<bibliography>

  <authorURL url="https://nixos.org/~eelco/">Eelco Dolstra</authorURL>
  <authorURL url="http://martin.bravenboer.name/index.html">Martin Bravenboer</authorURL>
  <authorURL url="http://swerl.tudelft.nl/bin/view/EelcoVisser/WebHome">Eelco Visser</authorURL>
  <authorURL url="http://www.extra.research.philips.com/hera/people/mdejonge/">Merijn de Jonge</authorURL>
  <authorURL url="http://www.serc.nl/people/florijn/">Gert Florijn</authorURL>
  <authorURL url="http://people.cs.uu.nl/andres/">Andres Löh</authorURL>
  <authorURL url="http://www.st.ewi.tudelft.nl/~sander/">Sander van der Burg</authorURL>

  <items>

    <misc>
      <author>Joachim Schiele</author>
      <title>Multi-Platform Software Package Management</title>
      <day>26</day>
      <month>March</month>
      <year>2011</year>
      <link type="pdf" url="https://github.com/qknight/Multi-PlatformSoftwarePackageManagement/raw/master/Multi-PlatformSoftwarePackageManagement.pdf" />
      <tag name="nix" />
      <htmlnote><em>Diplomarbeit</em> at the University of Tübingen.</htmlnote>
      <abstract>
        Today's package management is a complex field. This diploma
        thesis analyses different package management systems in
        several regards: how the packaging is done; how the user
        interacts with the package manager; Apt (Debian Linux),
        Portage (Gentoo Linux) and Nix (Nix OS) are compared in great
        detail.  To get practical results, the author used the
        evopedia application, an open source offline Wikipedia reader,
        to experiment with several different package managers. This
        diploma thesis also tries to answer why there are no complex
        package managers for Microsoft Windows. Most package managers
        use their own terms which can not be generalized to other
        package managers. This problem was solved by defining
        meaningful words which describe certain properties of a
        package manager.
      </abstract>
    </misc>

    <inproceedings id="issre10">
      <author>Sander van der Burg</author>
      <author>Eelco Dolstra</author>
      <title>Automating System Tests Using Declarative Virtual Machines</title>
      <booktitle url="http://www.issre2010.org/">21st IEEE
      International Symposium on Software Reliability Engineering
      (ISSRE 2010)</booktitle>
      <location>San Jose, California, USA</location>
      <day>1—4</day>
      <month>November</month>
      <year>2010</year>
      <link type="pdf" url="https://nixos.org/~eelco/pubs/decvms-issre2010-final.pdf" />
      <tag name="nixos" />

      <abstract>
        <p>Automated regression test suites are an essential software
        engineering practice: they provide developers with rapid
        feedback on the impact of changes to a system’s source code.
        The inclusion of a test case in an automated test suite
        requires that the system’s build process can automatically
        provide all the <em>environmental dependencies</em> of the
        test.  These are external elements necessary for a test to
        succeed, such as shared libraries, running programs, and so
        on.  For some tests (e.g., a compiler’s), these requirements
        are simple to meet.</p>

        <p>However, many kinds of tests, especially at the integration
        or system level, have complex dependencies that are hard to
        provide automatically, such as running database servers,
        administrative privileges, services on external machines or
        specific network topologies.  As such dependencies make tests
        difficult to script, they are often only performed manually,
        if at all.  This particularly affects testing of distributed
        systems and system-level software.</p>

        <p>This paper shows how we can automatically instantiate the
        complex environments necessary for tests by creating (networks
        of) virtual machines on the fly from declarative
        specifications.  Building on NixOS, a Linux distribution with
        a declarative configuration model, these specifications
        concisely model the required environmental dependencies.  We
        also describe techniques that allow efficient instantiation of
        VMs.  As a result, complex system tests become as easy to
        specify and execute as unit tests.  We evaluate our approach
        using a number of representative problems, including automated
        regression testing of a Linux distribution.</p>
      </abstract>
    </inproceedings>

    <misc>
      <author>Eelco Dolstra</author>
      <author>Andres Löh</author>
      <author>Nicolas Pierron</author>
      <title>NixOS: A Purely Functional Linux Distribution</title>
      <series url="https://journals.cambridge.org/action/displayJournal?jid=JFP">Journal of Functional Programming</series>
      <publisher>Cambridge University Press</publisher>
      <year>2010</year>
      <volume>20</volume>
      <number>5–6</number>>
      <pages first="577" last="615" />
      <link type="pdf" url="https://nixos.org/~eelco/pubs/nixos-jfp-final.pdf" />
      <link type="doi" url="https://dx.doi.org/10.1017/S0956796810000195 " />
      <tag name="nixos" />

      <abstract>
        Existing package and system configuration management tools
        suffer from an <em>imperative model</em>, where system
        administration actions such as upgrading packages or changes
        to system configuration files are stateful: they destructively
        update the state of the system.  This leads to many problems,
        such as the inability to roll back changes easily, to deploy
        multiple versions of a package side-by-side, to reproduce a
        configuration deterministically on another machine, or to
        reliably upgrade a system.  In this article we show that we
        can overcome these problems by moving to a <em>purely
        functional system configuration model</em>.  This means that
        all static parts of a system (such as software packages,
        configuration files and system startup scripts) are built by
        pure functions and are immutable, stored in a way analogously
        to a heap in a purely functional language.  We have
        implemented this model in <em>NixOS</em>, a non-trivial Linux
        distribution that uses the <em>Nix package manager</em> to
        build the entire system configuration from a modular, purely
        functional specification.
      </abstract>
    </misc>
    
    <inproceedings>
      <author>Sander van der Burg</author>
      <author>Eelco Dolstra</author>
      <author>Merijn de Jonge</author>
      <author>Eelco Visser</author>
      <title>Software Deployment in a Dynamic Cloud — From Device to
      Service Orientation in a Hospital Environment</title>
      <booktitle url="http://www.icse-cloud09.org/">ICSE 2009 Workshop
      on Software Engineering Challenges in Cloud
      Computing</booktitle>
      <pages first="61" last="66" />
      <location>Vancouver, British Columbia, Canada</location>
      <day>23</day>
      <month>May</month>
      <year>2009</year>
      <link type="pdf" url="https://nixos.org/~eelco/pubs/icse-cloud09-final.pdf" />
      <link type="acm" url="https://portal.acm.org/citation.cfm?id=1564595.1564630" />

      <abstract>
        Hospital environments are currently primarily
        <em>device-oriented</em>: software services are installed,
        often manually, on specific devices.  For instance, an
        application to view MRI scans may only be available on a
        limited number of workstations.  The medical world is changing
        to a <em>service-oriented</em> environment, which means
        that every software service should be available on every
        device.  However, these devices have widely varying
        capabilities, ranging from powerful workstations to PDAs, and
        high-bandwidth local machines to low-bandwidth remote
        machines.  To support running applications in such an
        environment, we need to treat the hospital machines as a
        <em>cloud</em>, where components of the application are
        automatically deployed to machines in the cloud with the
        required capabilities and connectivity.  In this paper, we
        suggest an architecture for applications in such a cloud, in
        which components are reliably and automatically deployed on
        the basis of a declarative model of the application using the
        Nix package manager.
      </abstract>
    </inproceedings>

    <inproceedings>
      <author>Sander van der Burg</author>
      <author>Eelco Dolstra</author>
      <author>Merijn de Jonge</author>
      <title>Atomic Upgrading of Distributed Systems</title>
      <booktitle url="http://hotswup.org/">First
      ACM Workshop on Hot Topics in Software Upgrades
      (HotSWUp)</booktitle>
      <location>Nashville, Tennessee, USA</location>
      <day>20</day>
      <month>October</month>
      <year>2008</year>
      <link type="pdf" url="https://nixos.org/~eelco/pubs/atomic-hotswup2008-final.pdf" />
      <link type="acm" url="https://portal.acm.org/citation.cfm?id=1490283.1490294" />

      <abstract>
        Upgrading distributed systems is a complex process.  It
        requires installing the right services on the right machines,
        configuring them correctly, and so on, which is error-prone
        and tedious.  Moreover, since services in a distributed system
        depend on each other and are updated separately, upgrades
        typically are not <em>atomic</em>: there is a time window
        during which some but not all services are updated, and a new
        version of one service might temporarily talk to an old
        version of another service.  Previously we implemented the
        <em>Nix package management system</em>, which allows atomic
        upgrades and rollbacks on single systems.  In this paper we
        show an extension to Nix that enables the deployment of
        distributed systems on the basis of a declarative deployment
        model, and supports atomic upgrades of such systems.
      </abstract>
    </inproceedings>

    <inproceedings>
      <author>Eelco Dolstra</author>
      <author>Andres Löh</author>
      <title>NixOS: A Purely Functional Linux Distribution</title>
      <booktitle url="http://www.icfpconference.org/icfp2008/">ICFP 2008: 13th ACM SIGPLAN International Conference on Functional Programming</booktitle>
      <location>Victoria, British Columbia, Canada</location>
      <day>22—24</day>
      <month>September</month>
      <year>2008</year>
      <pages first="367" last="378" />
      <link type="pdf" url="https://nixos.org/~eelco/pubs/nixos-icfp2008-final.pdf" />
      <link type="acm" url="https://portal.acm.org/citation.cfm?id=1411204.1411255" />
      <tag name="nixos" />

      <abstract>
        Existing package and system configuration management tools
        suffer from an <em>imperative model</em>, where system
        administration actions such as upgrading packages or changes
        to system configuration files are stateful: they destructively
        update the state of the system.  This leads to many problems,
        such as the inability to roll back changes easily, to run
        multiple versions of a package side-by-side, to reproduce a
        configuration deterministically on another machine, or to
        reliably upgrade a system.  In this paper we show that we can
        overcome these problems by moving to a <em>purely functional
        system configuration model</em>.  This means that all static
        parts of a system (such as software packages, configuration
        files and system startup scripts) are built by pure functions
        and are immutable, stored in a way analogously to a heap in a
        purely function language.  We have implemented this model in
        <em>NixOS</em>, a non-trivial Linux distribution that uses
        the <em>Nix package manager</em> to build the entire
        system configuration from a purely functional specification.
      </abstract>
    </inproceedings>

    <inproceedings>
      <author>Eelco Dolstra</author>
      <author>Eelco Visser</author>
      <title>The Nix Build Farm: A Declarative Approach to Continuous
      Integration</title>
      <booktitle
      url="http://scg.unibe.ch/wiki/events/wasdett2008">International
      Workshop on Advanced Software Development Tools and Techniques
      (WASDeTT 2008)</booktitle>
      <location>Paphos, Cyprus</location>
      <day>8</day>
      <month>July</month>
      <year>2008</year>
      <link type="pdf" url="https://nixos.org/~eelco/pubs/buildfarm-wasdett2008-final.pdf" />
      <htmlnote><em>To appear.</em></htmlnote>

      <abstract>
        There are many tools to support continuous integration (the
        process of automatically and continuously building a project
        from a version management repository).  However, they do not
        have good support for variability in the build environment:
        dependencies such as compilers, libraries or testing tools
        must typically be installed manually on all machines on which
        automated builds are performed.  The <em>Nix package
        manager</em> solves this problem: it has a purely functional
        language for describing package build actions and their
        dependencies, allowing the build environment for projects to
        be produced automatically and deterministically.  We have used
        Nix to build a continuous integration tool, the <em>Nix
        build farm</em>, that is in use to continuously build and
        release a large set of projects.
      </abstract>
    </inproceedings>
    
    <inproceedings>
      <author>Eelco Dolstra</author>
      <title>Maximal Laziness — An Efficient Interpretation Technique for Purely Functional DSLs</title>
      <booktitle url="http://ldta2008.inf.elte.hu/">Eighth Workshop on
      Language Descriptions, Tools and Applications (LDTA
      2008)</booktitle>
      <location>Budapest, Hungary</location>
      <series url="http://www.sciencedirect.com/science/journal/15710661">Electronic Notes in Theoretical Computer Science</series>
      <volume>238</volume>
      <number>5</number>
      <pages first="81" last="99" />
      <publisher>Elsevier Science Publishers</publisher>
      <day>5</day>
      <month>April</month>
      <year>2008</year>
      <link type="pdf" url="https://nixos.org/~eelco/pubs/laziness-ldta2008-final.pdf" />
      <link type="doi" url="https://dx.doi.org/10.1016/j.entcs.2009.09.042" />
      <htmlnote><em>To appear.</em></htmlnote>

      <abstract>
        In lazy functional languages, any variable is evaluated at
        most once.  This paper proposes the notion of <em>maximal
        laziness</em>, in which syntactically equal terms are
        evaluated at most once: if two terms
        <em>e</em><sub>1</sub> and
        <em>e</em><sub>2</sub> arising during the evaluation
        of a program have the same abstract syntax representation,
        then only one will be evaluated, while the other will reuse
        the former’s evaluation result.  Maximal laziness can be
        implemented easily in interpreters for purely functional
        languages based on term rewriting systems that have the
        property of <em>maximal sharing</em> — if two terms are
        equal, they have the same address.  It makes it easier to
        write interpreters, as techniques such as closure updating,
        which would otherwise be required for efficiency, are not
        needed.  Instead, a straight-forward translation of
        call-by-name semantic rules yields a call-by-need interpreter,
        reducing the gap between the language specification and its
        implementation.  Moreover, maximal laziness obviates the need
        for optimisations such as memoisation and let-floating.
      </abstract>
    </inproceedings>

    <inproceedings id="hotos07">
      <author>Eelco Dolstra</author>
      <author>Armijn Hemel</author>
      <title>Purely Functional System Configuration Management</title>
      <booktitle url="https://www.usenix.org/events/hotos07/">11th Workshop
      on Hot Topics in Operating Systems (HotOS XI)</booktitle>
      <location>San Diego, California, USA</location>
      <publisher>USENIX</publisher>
      <month>May</month>
      <year>2007</year>
      <link type="pdf" url="https://nixos.org/~eelco/pubs/hotos-final.pdf" />
      <tag name="nixos" />

      <abstract>
        System configuration management is difficult because systems
        evolve in an undisciplined way: packages are upgraded,
        configuration files are edited, and so on.  The management of
        existing operating systems is strongly <em>imperative</em>
        in nature, since software packages and configuration data
        (e.g., <tt>/bin</tt> and <tt>/etc</tt> in Unix) can be seen as
        imperative data structures: they are updated in-place by
        system administration actions.  In this paper we present an
        alternative approach to system configuration management: a
        <em>purely functional</em> method, analogous to languages
        like Haskell.  In this approach, the static parts of a
        configuration — software packages, configuration files,
        control scripts — are built from pure functions, i.e., the
        results depend solely on the specified inputs of the function
        and are immutable.  As a result, realising a system
        configuration becomes deterministic and reproducible.
        Upgrading to a new configuration is mostly atomic and doesn’t
        overwrite anything of the old configuration, thus enabling
        rollbacks.  We have implemented the purely functional model in
        a small but realistic Linux-based operating system
        distribution called NixOS.
      </abstract>
    </inproceedings>

    <inproceedings>
      <author>Eelco Dolstra</author>
      <author>Eelco Visser</author>
      <title>Automated Software Testing and Release with Nix Build Farms</title>
      <booktitle url="https://web.archive.org/web/20081202033839/http://www.laquso.com/VVSS2007/">Verification
      and Validation of Software Systems (VVSS-2007)</booktitle>
      <location>Eindhoven, The Netherlands</location>
      <month>March</month>
      <year>2007</year>
      <link type="pdf" url="https://pure.tue.nl/ws/files/2239914/628612.pdf" />
    </inproceedings>

    <mastersthesis>
      <author>Armijn Hemel</author>
      <title>NixOS: the Nix based operating system</title>
      <number url="http://www.cs.uu.nl/education/scripties/scriptie.php?SID=INF/SCR-2005-091">INF/SCR-2005-091</number>
      <location>Institute of Information and Computing Sciences, Utrecht University, Utrecht, The Netherlands</location>
      <month>August</month>
      <year>2006</year>
      <link type="pdf" url="SCR-2005-091.pdf" />

      <abstract>
        <p>The subject of this thesis is how the Nix package
        management system can be applied to manage a whole Linux
        distribution. Many conventional package management systems
        have drawbacks that Nix ﬁxes. But, Nix has never been used to
        deploy and manage a whole system.</p>

        <p>In this thesis a proof of concept Linux distribution called
        NixOS is described.  NixOS uses the Nix package management
        system to manage all software that is installed on the system,
        including the Linux kernel, all software and system
        services.</p>

        <p>Using Nix to manage all software on a system, as is done on
        NixOS, has several advantages. Developers don’t need to be
        worried that unwanted dependencies are picked up during the
        build of a software package, since these are completely
        eliminated. System administrators get the possibility to
        deploy services using Nix and how they can immediately use all
        beneﬁts from Nix, including atomic upgrades and rollbacks,
        without going through a painful cycle of rolling back a
        service, with all its, possibly also updated,
        dependencies.</p>

        <p>This thesis describes the implementation NixOS, including
        pitfalls that were encountered and choices that were
        made. Also shown are some concrete results of running NixOS
        and how NixOS can be bettered.</p>
      </abstract>
    </mastersthesis>


    <phdthesis id="dolstra06thesis">
      <author>Eelco Dolstra</author>
      <title>The Purely Functional Software Deployment Model</title>
      <location>Faculty of Science, Utrecht, The Netherlands</location>
      <month>January</month>
      <year>2006</year>
      <isbn>90-393-4130-3</isbn>
      <link type="pdf" url="https://nixos.org/~eelco/pubs/phd-thesis.pdf" />
      <link type="igitur" url="http://igitur-archive.library.uu.nl/dissertations/2006-0118-200031/index.htm" />
      <tag name="nix" />

      <abstract>
        <p>Software deployment is the set of activities related to
        getting software components to work on the machines of end
        users.  It includes activities such as installation,
        upgrading, uninstallation, and so on.  Many tools have been
        developed to support deployment, but they all have serious
        limitations with respect to correctness.  For instance, the
        installation of a component can lead to the failure of
        previously installed components; a component might require
        other components that are not present; and it is generally
        difficult to undo deployment actions.  The fundamental causes
        of these problems are a lack of isolation between components,
        the difficulty in identifying the dependencies between
        components, and incompatibilities between versions and
        variants of components.</p>

        <p>This thesis describes a better approach based on a purely
        functional deployment model, implemented in a deployment
        system called Nix.  Components are stored in isolation from
        each other in a Nix store.  Each component has a name that
        contains a cryptographic hash of all inputs that contributed
        to its build process, and the content of a component never
        changes after it has been built.  Hence the model is purely
        functional.</p>

        <p>This storage scheme provides several important advantages.
        First, it ensures isolation between components: if two
        components differ in any way, they will be stored in different
        locations and will not overwrite each other.  Second, it
        allows us to identify component dependencies.  Undeclared
        build time dependencies are prevented due to the absence of
        “global” component directories used in other deployment
        systems.  Runtime dependencies can be found by scanning for
        cryptographic hashes in the binary contents of components, a
        technique analogous to conservative garbage collection in
        programming language implementation.  Since dependency
        information is complete, complete deployment can be performed
        by copying closures of components under the dependency
        relation.</p>

        <p>Developers and users are not confronted with components’
        cryptographic hashes directly.  Components are built
        automatically from Nix expressions, which describe how to
        build and compose arbitrary software components; hashes are
        computed as part of this process.  Components are
        automatically made available to users through “user
        environments”, which are synthesised sets of activated
        components.  User environments enable atomic upgrades and
        rollbacks, as well as different sets of activated components
        for different users.</p>

        <p>Nix expressions provide a source-based deployment model.
        However, source-based deployment can be transparently
        optimised into binary deployment by making pre-built binaries
        (keyed on their cryptographic hashes) available in a shared
        location such as a network server.  This is referred to as
        transparent source/binary deployment.</p>

        <p>The purely functional deployment model has been validated
        by applying it to the deployment of more than 278 existing
        Unix packages.  In addition, this thesis shows that the model
        can be applied naturally to the related activities of
        continuous integration using build farms, service deployment
        and build management.</p>

      </abstract>
      
    </phdthesis>

    <inproceedings id="securesharing">
      <author>Eelco Dolstra</author>
      <title>Secure Sharing Between Untrusted Users in a Transparent
      Source/Binary Deployment Model</title>
      <booktitle url="http://www.ase-conference.org/">20th IEEE/ACM
      International Conference on Automated Software Engineering (ASE
      2005)</booktitle>
      <pages first="154" last="163" />
      <location>Long Beach, California, USA</location>
      <publisher>ACM Press</publisher>
      <month>November</month>
      <year>2005</year>
      <link type="pdf" url="https://nixos.org/~eelco/pubs/secsharing-ase2005-final.pdf" />
      <link type="acm" url="https://portal.acm.org/citation.cfm?id=1101933&amp;jmp=cit&amp;coll=ACM&amp;dl=ACM&amp;CFID=69373357&amp;CFTOKEN=14664181#CIT" />
      <tag name="nix" />

      <abstract>
        <p>The Nix software deployment system is based on the paradigm
        of <em>transparent source/binary deployment</em>: distributors
        deploy descriptors that build components from source, while
        client machines can transparently optimise such source builds
        by downloading pre-built binaries from remote repositories.
        This model combines the simplicity and flexibility of source
        deployment with the efficiency of binary deployment.  A
        desirable property is <em>sharing</em> of components: if
        multiple users install from the same source descriptors,
        ideally only one remotely built binary should be installed.
        The problem is that users must trust that remotely downloaded
        binaries were built from the sources they are claimed to have
        been built from, while users in general do not have a trust
        relation with each other or with the same remote
        repositories.</p>

        <p>This paper presents three models that enable sharing: the
        <em>extensional model</em> that requires that all users on a
        system have the same remote trust relations, the
        <em>intensional model</em> that does not have this requirement
        but may be suboptimal in terms of space use, and the <em>mixed
        model</em> that merges the best properties of both.  The
        latter two models are achieved through a novel technique of
        {\em hash rewriting} in content-addressable component stores,
        and were implemented in the context of the Nix system.</p>
      </abstract>
      
    </inproceedings>

    <inproceedings id="servicecm">
      <author>Eelco Dolstra</author>
      <author>Martin Bravenboer</author>
      <author>Eelco Visser</author>
      <title>Service Configuration Management</title>
      <editor>E. James Whitehead, Jr.</editor>
      <editor>Annita Persson Dahlqvist</editor>
      <booktitle url="https://users.soe.ucsc.edu/~ejw/scm12/">12th
      International Workshop on Software Configuration Management
      (SCM-12)</booktitle>
      <pages first="83" last="98" />
      <location>Long Beach, California, USA</location>
      <month>September</month>
      <year>2005</year>
      <link type="pdf" url="https://nixos.org/~eelco/pubs/servicecm-scm12-final.pdf" />
      <tag name="nix" />

      <abstract>
        The deployment of services — sets of running programs that
        provide some useful facility on a system or network — is
        typically implemented through a manual, time-consuming and
        error-prone process.  For instance, system administrators must
        deploy the necessary software components, edit configuration
        files, start or stop processes, and so on.  This is often done
        in an <em>ad hoc</em> style with no reproducibility, violating
        proper configuration management practices.  In this paper we
        show that build management, software deployment and service
        deployment can be integrated into a single formalism.  We do
        this in the context of the Nix software deployment system, and
        show that its advantages — co-existence of versions and
        variants, atomic upgrades and rollbacks, and component closure
        — extend naturally to service deployment.  The approach also
        elegantly extends to distributed services.  In addition, we
        show that the Nix expression language can simplify the
        implementation of crosscutting variation points in services.
      </abstract>

    </inproceedings>

    <inproceedings>
      <author>Eelco Dolstra</author>
      <title>Efficient Upgrading in a Purely Functional Component
      Deployment Model</title>
      <editor>George Heineman et al.</editor>
      <booktitle url="http://www.sei.cmu.edu/pacc/CBSE2005/">Eighth
      International SIGSOFT Symposium on Component-based Software
      Engineering (CBSE 2005)</booktitle>
      <volume url="https://www.springer.com/book/9783540258773">3489</volume>
      <series>Lecture Notes in Computer Science</series>
      <pages first="219" last="234" />
      <location>St. Louis, Missouri, USA</location>
      <publisher>Springer-Verlag</publisher>
      <month>May</month>
      <year>2005</year>
      <link type="pdf" url="https://nixos.org/~eelco/pubs/eupfcdm-cbse2005-final.pdf" />
      <htmlnote>© Springer-Verlag.</htmlnote>
      <tag name="nix" />

      <abstract>
        Safe and efficient deployment of software components is an
        important aspect of CBSE.  The Nix deployment system enables
        side-by-side deployment of different versions and variants of
        components, complete installation, safe upgrades, and safe
        uninstalls through garbage collection.  It accomplishes this
        through a purely functional deployment model, meaning that the
        file system content of a component only depends on the inputs
        used to build it, and never changes afterwards.  An apparent
        downside to this model is that upgrading “fundamental”
        components used as build inputs by many other components
        becomes expensive, since all of these must be rebuilt and
        redeployed.  In this paper we show that binary patching
        between sets of components enables efficient deployment of
        upgrades in the purely functional model, transparently to
        users.  Sequences of patches can be combined automatically to
        enable upgrading between arbitrary versions.  The approach was
        empirically validated.
      </abstract>
        
    </inproceedings>

    <inproceedings>
      <author>Eelco Dolstra</author>
      <author>Merijn de Jonge</author>
      <author>Eelco Visser</author>
      <title>Nix: A Safe and Policy-Free System for Software
      Deployment</title>
      <editor>Lee Damon</editor>
      <booktitle url="https://www.usenix.org/events/lisa04/">18th
      Large Installation System Administration Conference (LISA
      '04)</booktitle>
      <pages first="79" last="92" />
      <location>Atlanta, Georgia, USA</location>
      <publisher>USENIX</publisher>
      <month>November</month>
      <year>2004</year>
      <link type="pdf" url="https://nixos.org/~eelco/pubs/nspfssd-lisa2004-final.pdf" />
      <tag name="nix" />

      <abstract>
        Existing systems for software deployment are neither safe nor
        sufficiently flexible.  Primary safety issues are the
        inability to enforce reliable specification of component
        dependencies, and the lack of support for multiple versions or
        variants of a component.  This renders deployment operations
        such as upgrading or deleting components dangerous and
        unpredictable.  A deployment system must also be flexible
        (i.e., policy-free) enough to support both centralised and
        local package management, and to allow a variety of mechanisms
        for transferring components.  In this paper we present Nix, a
        deployment system that addresses these issues through a simple
        technique of using cryptographic hashes to compute unique
        paths for component instances.
      </abstract>
      
    </inproceedings>

    <inproceedings>
      <author>Eelco Dolstra</author>
      <author>Eelco Visser</author>
      <author>Merijn de Jonge</author>
      <title>Imposing a Memory Management Discipline on Software
      Deployment</title>
      <booktitle url="http://conferences.iee.org/icse2004/">26th
      International Conference on Software Engineering (ICSE
      2004)</booktitle>
      <pages first="583" last="592" />
      <location>Edinburgh, Scotland</location>
      <publisher>IEEE Computer Society</publisher>
      <month>May</month>
      <year>2004</year>
      <link type="pdf" url="https://nixos.org/~eelco/pubs/immdsd-icse2004-final.pdf" />
      <link type="acm" url="https://portal.acm.org/citation.cfm?id=999463&amp;jmp=cit&amp;coll=ACM&amp;dl=ACM&amp;CFID=69373357&amp;CFTOKEN=14664181#CIT" />
      <tag name="nix" />

      <abstract>
        The deployment of software components frequently fails because
        dependencies on other components are not declared explicitly
        or are declared imprecisely.  This results in an incomplete
        reproduction of the environment necessary for proper
        operation, or in interference between incompatible variants.
        In this paper we show that these deployment hazards are
        similar to pointer hazards in memory models of programming
        languages and can be countered by imposing a memory management
        discipline on software deployment.  Based on this analysis we
        have developed a generic, platform and language independent,
        discipline for deployment that allows precise dependency
        verification; exact identification of component variants;
        computation of complete closures containing all components on
        which a component depends; maximal sharing of components
        between such closures; and concurrent installation of
        revisions and variants of components.  We have implemented the
        approach in the Nix deployment system, and used it for the
        deployment of a large number of existing Linux packages.  We
        compare its effectiveness to other deployment systems.
      </abstract>
      
    </inproceedings>

    <inproceedings>
      <author>Eelco Dolstra</author>
      <title>Integrating Software Construction and Software Deployment</title>
      <editor>Bernhard Westfechtel</editor>
      <editor>André van der Hoek</editor>
      <booktitle url="http://www-i3.informatik.rwth-aachen.de/private/bernhard/scm11.html">11th International Workshop on Software Configuration Management (SCM-11)</booktitle>
      <volume url="https://link.springer.com/book/10.1007%2F3-540-39195-9">2649</volume>
      <series>Lecture Notes in Computer Science</series>
      <pages first="102" last="117" />
      <location>Portland, Oregon, USA</location>
      <month>May</month>
      <year>2003</year>
      <link type="pdf" url="https://nixos.org/~eelco/pubs/iscsd-scm11-final.pdf" />

      <abstract>
        Classically, software deployment is a process consisting of
        building the software, packaging it for distribution, and
        installing it at the target site.  This approach has two
        problems.  First, a package must be annotated with dependency
        information and other meta-data.  This to some extent overlaps
        with component dependencies used in the build process.
        Second, the same source system can often be built into an
        often very large number of <em>variants</em>.  The distributor
        must decide which element(s) of the variant space will be
        packaged, reducing the flexibility for the receiver of the
        package.  In this paper we show how building and deployment
        can be integrated into a single formalism.  We describe a
        build manager called <em>Maak</em> that can handle deployment
        through a sufficiently general module system.  Through the
        sharing of generated files, a source distribution
        <em>transparently</em> turns into a binary distribution,
        removing the dichotomy between these two modes of deployment.
        In addition, the creation and deployment of variants becomes
        easy through the use of a simple functional language as the
        build formalism.
      </abstract>
      
    </inproceedings>

  </items>

</bibliography>
