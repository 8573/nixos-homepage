[% WRAPPER layout.tt title="Disnix examples" menu='disnix' %]

<p>
We have a number of examples cases available, which demonstrate various features of Disnix.
The example cases can be freely used under the MIT license and obtained through the
<a href="download.html">download</a> page.
</p>

<h2>Deploying in heterogeneous networks</h2>

<p>
There are various ways to try these examples. The first option is to deploy the system
in a <strong>heterogeneous</strong> network, which also takes the most effort.
This requires you to manually install a network of machines,
configure system services (such as a DBMS and web server), install Disnix and to write
an infrastructure model matching the properties of the systems in the network.
</p>

<p>
Services in a heterogeneous network can be deployed by running:
</p>

<pre>
$ disnix-env -s services.nix -i infrastructure.nix -d distribution.nix
</pre>

<h2>Deploying in a NixOS network using NixOps</h2>

<p>
Another option is to install a network of NixOS machines running the Disnix service.
The <strong>DisnixOS</strong> extension can be used to automatically upgrade the
underlying infrastructure to support the services.
</p>

<p>
With the following command you can use <a href="/nixops">NixOps</a> to deploy a network
of VirtualBox machines, and deploy the services with Disnix to them:
</p>

<pre>
$ nixops create ./network.nix ./network-virtualbox.nix -d vbox
$ nixops deploy -d vbox
$ export NIXOPS_DEPLOYMENT=vbox
$ disnixos-env -s services.nix -n network.nix -d distribution.nix --use-nixops
</pre>

<h2>Deploying in a NixOS network with the NixOS test driver</h2>

<p>
The most convenient way of trying these examples, is by using the <strong>NixOS test driver</strong>
integration feature of DisnixOS. This tool can be used on any Linux distribution (not just NixOS) using the
Nix package manager and KVM. It will automatically generate a network running NixOS
instances.
</p>

<p>
Running the following command automatically generates a network of QEMU virtual machines and
deploys the services inside them:
</p>

<pre>
$ disnixos-vm-env -s services.nix -n network.nix -d distribution.nix
</pre>

<h2>Examples</h2>

<p>
Currently, we have the following example systems available:
</p>

<h3>StaffTracker (PHP/MySQL version)</h3>

<p>
This example is a PHP/MySQL web application system to manage staff of a university department.
The system is composed of various databases; one to store zip codes, another to store room numbers
and one to store the staff members. A PHP web application front-end allows users to view and
modify staff members.
</p>

<ul>
<li><a href="https://github.com/svanderburg/disnix-stafftracker-php-example">GitHub repository</a></li>
</ul>

<h3>StaffTracker (Web services version)</h3>

<p>
A more complex variant of the previous example implemented in Java.
In this variant access to the databases is provided by web services. Moreover, a 
Geolocation service is included using
<a href="https://www.maxmind.com/app/ip-location">GeoIP</a> to determine a staff members'
location from an IP address.
</p>

<ul>
<li><a href="https://github.com/svanderburg/disnix-stafftracker-java-example">GitHub repository</a></li>
</ul>

<h3>StaffTracker.NET (Web services version)</h3>

<p>
A port of the previous web services example to .NET technologies, such as C#, WCF, ADO.NET and SQL server.
</p>

<ul>
<li><a href="https://github.com/svanderburg/disnix-stafftracker-dotnet-example">GitHub repository</a></li>
</ul>

<h3>ViewVC</h3>
<p>
A system running <a href="http://viewvc.tigris.org">ViewVC</a>, a web-based CVS and Subversion repository viewer.
In this example we automatically deploy the ViewVC web application front-end, a MySQL
database storing commit records, and an arbitrary number of Subversion repositories.
</p>

<ul>
<li><a href="https://github.com/svanderburg/disnix-viewvc-example">GitHub repository</a></li>
</ul>

<h3>Hello World example</h3>

<p>
A trivial example composed of web services, which show various ways to combine services together.
In this example four different compositions are shown, such as a dynamic variant using a lookup
service and a load balancer. This example can be used as a reference for designing services and
to make them better deployable.
</p>

<ul>
<li><a href="https://github.com/svanderburg/disnix-composition-example">GitHub repository</a></li>
</ul>

<h3>Disnix proxy example</h3>

<p>
A trivial example composed of two processes communicating with other through a TCP socket.
A proxy can be used to drain connections during the upgrade phase, which makes the upgrade
process completely atomic.
</p>

<ul>
<li><a href="https://github.com/svanderburg/disnix-proxy-example">GitHub repository</a></li>
</ul>

<h3>Virtual hosts example</h3>

<p>
An example that delegates requests per virtual hosts to specific web applications hosted on a
machine. It uses target-specific services to optimize the deployment process.
</p>

<ul>
<li><a href="https://github.com/svanderburg/disnix-virtualhosts-example">GitHub repository</a></li>
</ul>

[% END %]
